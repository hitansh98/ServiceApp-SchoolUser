/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 * @flow
 */

import React,{Component} from 'react';
import {
  SafeAreaView,
  StyleSheet,
  ScrollView,
  View,
  Text,
  StatusBar,
} from 'react-native';

import {
  Header,
  LearnMoreLinks,
  Colors,
  DebugInstructions,
  ReloadInstructions,
} from 'react-native/Libraries/NewAppScreen';
import firebase from 'react-native-firebase';

export default class App extends Component {

    
async componentDidMount(){

  const fcmToken = await firebase.messaging().getToken();
  if (fcmToken) {
      alert(fcmToken)
  } else {
      // user doesn't have a device token yet
  }

  this.notificationListener = firebase.notifications().onNotification((notification) => {
    let notificationMessage = notification._android._notification._data.action;
    let recordId = notification._android._notification._data.recordID;
    const channelId = new firebase.notifications.Android.Channel(
      'Default',
      'Default',
      firebase.notifications.Android.Importance.High
    );
    firebase.notifications().android.createChannel(channelId);
    let notification_to_be_displayed = new firebase.notifications.Notification({
      data: notification._android._notification._data,
      sound: 'default',
      show_in_foreground: true,
      title: notification.title,
      body: notification.body,
     });
     if (Platform.OS == 'android') {
      notification_to_be_displayed.android
        .setPriority(firebase.notifications.Android.Priority.High)
        .android.setChannelId('Default')
        .android.setVibrate(1000);
    }
    console.log('FOREGROUND NOTIFICATION LISTENER: \n', notification_to_be_displayed);
    firebase.notifications().displayNotification(notification_to_be_displayed);
    const {
      title,
      body
    } = notification;
    this.showAlert(title, body, );
     });
     const notificationOpen = await firebase.notifications().getInitialNotification();
     if (notificationOpen) {
    const {
      title,
      body
    } = notificationOpen.notification;
    this.showAlert(title, body);
     }
    this.notificationOpenedListener =
    firebase.notifications().onNotificationOpened((notificationOpen) => {
      const {
        title,
        body
      } = notificationOpen.notification;
      this.showAlert(title, body);
    });
     this.messageListener = firebase.messaging().onMessage((message) => {
    //process data message
     });
    this.handleConnectivityChange = isConnected => {
    this.setState({
      isConnected
    });
     }
    
} 
showAlert = (title, message) => {
  Alert.alert(
    title,
    message,
    [
      {text: 'OK', onPress: () => console.log('OK Pressed')},
    ],
    {cancelable: false},
  );
}

// firebase.messaging().getToken().then((token) => {
//   this._onChangeToken(token, language)
// });

// firebase.messaging().onTokenRefresh((token) => {
//    this._onChangeToken(token, language)
// });
// }

// _onChangeToken = (token, language) => {
// var data = {
//  'device_token': token,
//  'device_type': Platform.OS,
//  'device_language': language
// };

// this._loadDeviceInfo(data).done();
// }

// _loadDeviceInfo = async (deviceData) => {
// // load the data in 'local storage'.
// // this value will be used by login and register components.
// var value = JSON.stringify(deviceData);
// try {
//  await AsyncStorage.setItem(config.DEVICE_STORAGE_KEY, value);
// } catch (error) {
//  console.log(error);
// }
// };  


  render() {
    return (

      <View>
        <Text> textInComponent </Text>
      </View>
    )
  }
}
